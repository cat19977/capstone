{"version":3,"sources":["ParamBar.js","Graph.js","App.js","serviceWorker.js","index.js"],"names":["ParamBar","props","state","crash_risk","prevalence","efficacy","fatality","this","angle_up","icon","angle_down","text_boxes","class","for","id","type","onClick","setState","React","Component","Graph","data_bar","data_int","layout_int","get_data_bar","bind","get_data_int","x","y","error_y","array","visible","autosize","paper_bgcolor","plot_bgcolor","xaxis","gridcolor","range","showgrid","showline","showticklabels","tickcolor","ticks","zeroline","yaxis","automargin","title","margin","l","r","b","t","pad","fill","fillcolor","line","color","name","showlegend","mode","int_layout","display","flex-direction","width","data","layout","config","responsive","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b7576e48.chunk.js","sourcesContent":["import React from 'react';\nimport './ParamBar.css';\nimport { faHome } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faCoffee } from '@fortawesome/fontawesome-free-solid'\n\nclass ParamBar extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { \n            //each of these is state to whether input box is showing for each param\n            crash_risk: false,\n            prevalence: false,\n            efficacy: false,\n            fatality: false\n        };\n    }\n\n    render() {\n        const {fatality, crash_risk, prevalence, efficacy} = this.state;\n        var angle_up = <FontAwesomeIcon icon={\"angle-up\"}/>;\n        var angle_down = <FontAwesomeIcon icon={\"angle-down\"}/>;\n        var text_boxes = <div class='text_boxes'>\n                <div class = 'low'>\n                    <label for='low'>Low</label>\n                    <input class='input' id='low' type=\"input\" type=\"text\"/>\n                </div>\n                <div class = 'medium'>\n                    <label for='medium'>Medium</label>\n                    <input class=\"input\" id='medium' type=\"text\"/>\n                </div>\n                <div class = 'high'>\n                    <label for='high'>High</label>\n                    <input class=\"input\" id='high' type=\"text\"/>\n                </div>\n            </div>\n        return (\n            <div class = \"dropdown\">\n                <label class='drop-label'> Parameters: </label>\n                <button onClick={() => this.setState({crash_risk: !crash_risk})}>Crash Risk Without System\n                {crash_risk ? angle_down: angle_up}  \n                </button>\n                { crash_risk \n                    ? text_boxes\n                    : null\n                }\n                <button onClick={() => this.setState({prevalence: !prevalence})}>Prevalence \n                {prevalence ? angle_down: angle_up}  \n                    </button>\n                { prevalence \n                    ? text_boxes\n                    : null\n                }\n                <button onClick={() => this.setState({efficacy: !efficacy})}>Efficacy\n                {efficacy ? angle_down: angle_up} \n                </button>\n                { efficacy \n                    ? text_boxes\n                    : null\n                }\n                <button onClick={() => this.setState({fatality: !fatality})}>Fatality Rate\n                {fatality ? angle_down: angle_up} \n                </button>\n                { fatality\n                    ? text_boxes\n                    : null\n                }\n            </div>  \n        )\n    }\n\n}\n\nexport default ParamBar;","import React from 'react';\nimport Plot from 'react-plotly.js';\nimport \"./Graph.css\"\n\nclass Graph extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { \n\n        };\n        this.data_bar =''\n        this.data_int=''\n        this.layout_int=''\n        this.get_data_bar = this.get_data_bar.bind(this);\n        this.get_data_int =  this.get_data_int.bind(this);\n    }\n\n    get_data_bar(){\n        var data = [\n            {\n              x: [0, 1, 2],\n              y: [6, 10, 2],\n              error_y: {\n                type: 'data',\n                array: [1, 2, 3],\n                visible: true\n              },\n              type: 'scatter'\n            }\n          ];\n        \n        this.data_bar = data;\n    }\n\n    get_data_int(){\n        var trace1 = {\n            x: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1], \n            y: [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0], \n            fill: \"tozerox\", \n            fillcolor: \"rgba(0,100,80,0.2)\", \n            line: {color: \"transparent\"}, \n            name: \"Fair\", \n            showlegend: false, \n            type: \"scatter\"\n          };\n        var trace4 = {\n            x: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], \n            y: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], \n            line: {color: \"rgb(0,100,80)\"}, \n            mode: \"lines\", \n            name: \"Fair\", \n            type: \"scatter\"\n        };\n        var layout = {\n        autosize: true,\n        paper_bgcolor: \"rgba(0,0,0,0)\", \n        plot_bgcolor: \"rgb(229,229,229)\", \n        xaxis: {\n            gridcolor: \"rgb(255,255,255)\", \n            range: [1, 10], \n            showgrid: true, \n            showline: false, \n            showticklabels: true, \n            tickcolor: \"rgb(127,127,127)\", \n            ticks: \"outside\", \n            zeroline: false\n        }, \n        yaxis: {\n            gridcolor: \"rgb(255,255,255)\", \n            showgrid: true, \n            showline: false, \n            showticklabels: true, \n            tickcolor: \"rgb(127,127,127)\", \n            ticks: \"outside\", \n            zeroline: false\n        },\n        automargin:true,\n        title: 'Plot1',\n        margin: {\n            l: 50,\n            r: 10,\n            b: 50,\n            t: 50,\n            pad: 1\n          },\n        }\n        this.layout_int = layout\n        this.data_int=[trace1, trace4]\n    }\n\n\nrender() {\n    this.get_data_bar()\n    this.get_data_int()\n    var data_bar=this.data_bar;\n    var data_int=this.data_int;\n    var int_layout = this.layout_int;\n    return(\n        <div class='plots' display='flex' flex-direction='row'>\n            <div class='graph1' width='50%'>\n            <Plot width=\"100%\"\n                data={data_int}\n                layout={int_layout}\n                config = {{responsive: true}}\n            />\n            </div>\n            <div class='graph2' width='50%'>\n            <Plot width=\"100%\"\n                data={data_bar}\n                layout ={ {autosize: true,\n                    paper_bgcolor: \"rgba(0,0,0,0)\",\n                    title: 'Plot2',\n                    margin: {\n                        l: 50,\n                        r: 10,\n                        b: 50,\n                        t: 50,\n                        pad: 1\n                      },\n                    }}\n                config = {{responsive: true}}\n            />\n            </div>\n        </div>\n            \n    )\n    }\n}\n\nexport default Graph;","import React from 'react';\nimport './App.css';\nimport ParamBar from './ParamBar.js'\nimport Graph from './Graph.js'\nimport Plot from 'react-plotly.js';\n\nfunction App() {\n  \n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>\n          Estimate Of Lives Saved\n        </p>\n        \n      </header>\n      <body className=\"App-body\">\n        <div class='sidebar-cont'>\n          <ParamBar/>\n          <button class= 'estimate_btn' type=\"button\">Get Estimate</button>\n        </div>\n        <div class='plots-cont'>\n          <Graph/>\n        </div>\n\n        </body>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}